package constructors;

public class КонструкторБазовогоКласса {
    public static class Animal {

        String brain = "Изначальное значение brain в классе Animal";
        String heart = "Изначальное значение heart в классе Animal";

        public static int animalCount = 7700000;

        public Animal(String brain, String heart) {
            System.out.println("Выполняется конструктор базового класса Animal");
            System.out.println("Были ли уже проинициализированы переменные класса Animal?");
            System.out.println("Текущее значение статической переменной animalCount = " + animalCount);
            System.out.println("Текущее значение brain в классе Animal = " + this.brain);
            System.out.println("Текущее значение heart в классе Animal = " + this.heart);
            System.out.println("Были ли уже проинициализированы переменные класса Cat?");
            System.out.println("Текущее значение статической переменной catsCount = " + Cat.catsCount);

            this.brain = brain;
            this.heart = heart;
            System.out.println("Конструктор базового класса Animal завершил работу!");
            System.out.println("Текущее значение brain = " + this.brain);
            System.out.println("Текущее значение heart = " + this.heart);
        }
    }

    public static class Cat extends Animal {

        String tail = "Изначальное значение tail в классе Cat";

        static int catsCount = 37;

        public Cat(String brain, String heart, String tail) {
            super(brain, heart);
            System.out.println("Конструктор класса Cat начал работу (конструктор Animal уже был выполнен)");
            System.out.println("Текущее значение статической переменной catsCount = " + catsCount);
            System.out.println("Текущее значение tail = " + this.tail);
            this.tail = tail;
            System.out.println("Текущее значение tail = " + this.tail);
        }

        public static void main(String[] args) {
            Cat cat = new Cat("Мозг", "Сердце", "Хвост");
        }
    }
}
/* Очень важно запомнить на будущее, что при создании объекта в первую очередь вызывается конструктор его базового класса, а только потом — конструктор самого класса, объект которого мы создаем.

То есть при создании объекта Cat сначала отработает конструктор класса Animal, а только потом конструктор Cat

 */

/* Итак, теперь мы наглядно видим в каком порядке происходит инициализация переменных и вызов конструкторов при создании нового объекта:
Инициализируются статические переменные базового класса (Animal). В нашем случае — переменной animalCount класса Animal присваивается значение 7700000.

Инициализируются статические переменные класса-потомка (Cat). Обрати внимание — мы все еще внутри конструктора Animal, а в консоли уже написано:

Выполняется конструктор базового класса Animal
Были ли уже проинициализированы переменные класса Animal?
Текущее значение статической переменной animalCount = 7700000
Текущее значение brain в классе Animal = Изначальное значение brain в классе Animal
Текущее значение heart в классе Animal = Изначальное значение heart в классе Animal
Были ли уже проинициализированы переменные класса Cat?
Текущее значение статической переменной catsCount = 37
Дальше инициализируются нестатические переменные базового класса. Мы специально присвоили им первоначальные значения, которые потом в конструкторе меняются на новые. Конструктор Animal еще не отработал до конца, но первоначальные значения brain и heart уже присвоены:

Выполняется конструктор базового класса Animal
Были ли уже проинициализированы переменные класса Animal?
Текущее значение статической переменной animalCount = 7700000
Текущее значение brain в классе Animal = Изначальное значение brain в классе Animal
Текущее значение heart в классе Animal = Изначальное значение heart в классе Animal
Начинает работу конструктор базового класса.

В том, что этот этап идет только четвертым по счету, мы уже убедились: в первых трех пунктах на момент начала работы конструктора Animal многим переменным уже присвоены значения.

Инициализация нестатических полей дочернего класса (Cat).

Она происходит раньше, чем конструктор Cat начинает работу.

На момент, когда он начал работу, у переменной tail уже было значение:

Конструктор класса Cat начал работу (конструктор Animal уже был выполнен)
Текущее значение статической переменной catsCount = 37
Текущее значение tail = Изначальное значение tail в классе Cat
Вызывается конструктор класса потомка Cat        */

